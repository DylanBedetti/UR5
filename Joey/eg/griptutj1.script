def gripper_tutorial2():
  set_tool_voltage(0)
  modbus_add_signal("192.168.1.6", 255, 130, 3, "bucketselect", False)
  modbus_set_signal_update_frequency("bucketselect", 10)
  modbus_add_signal("192.168.1.6", 255, 131, 2, "starttoken", False)
  modbus_set_signal_update_frequency("starttoken", 10)
  modbus_set_runstate_dependent_choice("bucketselect",0)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
  set_payload(0.0)
  set_gravity([0.0, 0.0, 9.82])
  set_safety_mode_transition_hardness(0)
  global Base=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_3=p[0.4276564669043538,-0.06510332743374715,0.8253256069765451,-1.761121677040929,1.9416304386846361,-0.5367451047669847]
  global bucket=p[0.1267229962071472,0.19771730044894786,0.8430265245324436,-1.9985869299048278,0.11877097943034823,-0.13691967566250268]
  global robopoint=p[0.31849527102440145,-0.10553969576737585,0.8536676766387312,-1.7448389490680207,1.7129664518790022,-0.6796947542894476]
  # begin: URCap Installation Node
  #   Source: Robotiq_2-Finger_Adaptive_Gripper, 1.1.2, Robotiq Inc.
  #   Type: Gripper
  
  ###########################################
  #######Gripper URCap preamble start########
  #######Version null########
  
  #aliases for the gripper variable names
  ACT = 1
  GTO = 2
  ATR = 3
  ARD = 4
  FOR = 5
  SPE = 6
  OBJ = 7
  STA = 8
  FLT = 9
  POS = 10
  PRE = 11
  
  def rq_init_connection(gripper_sid=9, gripper_socket="1"):
  	socket_open("127.0.0.1",63352, gripper_socket)
  	socket_set_var("SID", gripper_sid,  gripper_socket)
  	ack = socket_read_byte_list(3, gripper_socket)
  end
  
  def rq_set_sid(gripper_sid=9, gripper_socket="1"):
          socket_set_var("SID", gripper_sid,  gripper_socket)
          sync()
          return is_ack(socket_read_byte_list(3, gripper_socket))
  end
  
  def rq_activate(gripper_socket="1"):
  	rq_gripper_act = 0
  
          if (not rq_is_gripper_activated(gripper_socket)):
              rq_reset(gripper_socket)
          end
  
  	rq_set_var(ACT,1, gripper_socket)
  end
  
  def rq_activate_and_wait(gripper_socket="1"):
  	rq_activate(gripper_socket)
  
  	while(not rq_is_gripper_activated(gripper_socket)):
  		# wait for activation completed
  	end
  end
  
  def rq_stop(gripper_socket="1"):
  	rq_set_var(GTO,0, gripper_socket)
  end
  
  def rq_reset(gripper_socket="1"):
  	rq_gripper_act = 0
  	rq_obj_detect = 0
  	rq_mov_complete = 0
  
  	rq_set_var(ACT,0, gripper_socket)
  	rq_set_var(ATR,0, gripper_socket)
  end
  
  def rq_auto_release_open_and_wait(gripper_socket="1"):
  
  	rq_set_var(ARD,0, gripper_socket)
  	rq_set_var(ACT,1, gripper_socket)
  	rq_set_var(ATR,1, gripper_socket)
  
  	gFLT = rq_get_var(FLT, 2, gripper_socket)
  
  	while(not is_FLT_autorelease_completed(gFLT)):
  		gFLT = rq_get_var(FLT, 2, gripper_socket)
  	end
  end
  
  def rq_auto_release_close_and_wait(gripper_socket="1"):
  	rq_set_var(ARD,1, gripper_socket)
  	rq_set_var(ACT,1, gripper_socket)
  	rq_set_var(ATR,1, gripper_socket)
  
  	gFLT = rq_get_var(FLT, 2, gripper_socket)
  
  	while(not is_FLT_autorelease_completed(gFLT)):
  		gFLT = rq_get_var(FLT, 2, gripper_socket)
  	end
  end
  
  def rq_set_force(force, gripper_socket="1"):
  	rq_set_var(FOR,force, gripper_socket)
  end
  
  def rq_set_speed(speed, gripper_socket="1"):
  	rq_set_var(SPE,speed, gripper_socket)
  end
  
  def rq_open(gripper_socket="1"):
  	rq_move(0, gripper_socket)
  end
  
  def rq_close(gripper_socket="1"):
  	rq_move(255, gripper_socket)
  end
  
  def rq_open_and_wait(gripper_socket="1"):
  	rq_move_and_wait(0, gripper_socket)
  end
  
  def rq_close_and_wait(gripper_socket="1"):
  	rq_move_and_wait(255, gripper_socket)
  end
  
  def rq_move(pos, gripper_socket="1"):
  	rq_mov_complete = 0
  	rq_obj_detect = 0
  
  	rq_set_pos(pos, gripper_socket)
  	rq_go_to(gripper_socket)
  end
  
  def rq_move_and_wait(pos, gripper_socket="1"):
  	rq_move(pos, gripper_socket)
  
  	while (not rq_is_motion_complete(gripper_socket)):
  		# wait for motion completed
  		sleep(0.01)
  		sync()
  	end
  
  	# following code used for compatibility with previous versions
  	rq_is_object_detected(gripper_socket)
  
  	if (rq_obj_detect != 1):
  		rq_mov_complete = 1
  	end
  end
  
  def rq_wait(gripper_socket="1"):
          # Wait for the gripper motion to complete
          while (not rq_is_motion_complete(gripper_socket)):
  		# wait for motion completed
  		sleep(0.01)
  		sync()
  	end
  
  	# following code used for compatibility with previous versions
  	rq_is_object_detected(gripper_socket)
  
  	if (rq_obj_detect != 1):
  		rq_mov_complete = 1
  	end
  end
  
  def rq_go_to(gripper_socket="1"):
  	rq_set_var(GTO,1, gripper_socket)
  end
  
  # reset the rGTO to prevent movement and
  # set the position
  def rq_set_pos(pos, gripper_socket="1"):
  	rq_set_var(GTO,0, gripper_socket)
  
  	rq_set_var(POS, pos, gripper_socket)
  
  	gPRE = rq_get_var(PRE, 3, gripper_socket)
  	pre = (gPRE[1] - 48)*100 + (gPRE[2] -48)*10 + gPRE[3] - 48
  	sync()
  	while (pre != pos):
          rq_set_var(POS, pos, gripper_socket)
  		gPRE = rq_get_var(PRE, 3, gripper_socket)
  		pre = (gPRE[1] - 48)*100 + (gPRE[2] -48)*10 + gPRE[3] - 48
  		sync()
  	end
  end
  
  def rq_is_motion_complete(gripper_socket="1"):
  	rq_mov_complete = 0
  
  	gOBJ = rq_get_var(OBJ, 1, gripper_socket)
  	sleep(0.01)
  
  	if (is_OBJ_gripper_at_position(gOBJ)):
  		rq_mov_complete = 1
  		return True
  	end
  
  	if (is_OBJ_object_detected(gOBJ)):
  		rq_mov_complete = 1
  		return True
  	end
  
  	return False
  
  end
  
  def rq_is_gripper_activated(gripper_socket="1"):
  	gSTA = rq_get_var(STA, 1, gripper_socket)
  
  	if(is_STA_gripper_activated(gSTA)):
  		rq_gripper_act = 1
  		return True
  	else:
  		rq_gripper_act = 0
  		return False
  	end
  end
  
  def rq_is_object_detected(gripper_socket="1"):
  	gOBJ = rq_get_var(OBJ, 1, gripper_socket)
  
  	if(is_OBJ_object_detected(gOBJ)):
  		rq_obj_detect = 1
  		return True
  	else:
  		rq_obj_detect = 0
  		return False
  	end
  end
  
  def rq_current_pos(gripper_socket="1"):
  	rq_pos = socket_get_var("POS",gripper_socket)
  	sync()
      return rq_pos
  end
  
  def rq_print_gripper_fault_code(gripper_socket="1"):
  	gFLT = rq_get_var(FLT, 2, gripper_socket)
  
  	if(is_FLT_no_fault(gFLT)):
  		textmsg("Gripper Fault : ", "No Fault (0x00)")
  	elif (is_FLT_action_delayed(gFLT)):
  		textmsg("Gripper Fault : ", "Priority Fault: Action delayed, initialization must be completed prior to action (0x05)")
  	elif (is_FLT_not_activated(gFLT)):
  		textmsg("Gripper Fault : ", "Priority Fault: The activation must be set prior to action (0x07)")
  	elif (is_FLT_autorelease_in_progress(gFLT)):
  		textmsg("Gripper Fault : ", "Minor Fault: Automatic release in progress (0x0B)")
  	elif (is_FLT_overcurrent(gFLT)):
  		textmsg("Gripper Fault : ", "Minor Fault: Overcurrent protection tiggered (0x0E)")
  	elif (is_FLT_autorelease_completed(gFLT)):
  		textmsg("Gripper Fault : ", "Major Fault: Automatic release completed (0x0F)")
  	else:
  		textmsg("Gripper Fault : ", "Unkwown Fault")
  	end
  end
  
  def rq_print_gripper_num_cycles(gripper_socket="1"):
  	socket_send_string("GET NCY",gripper_socket)
  	sync()
  	string_from_server = socket_read_string(gripper_socket)
  	sync()
  
  	if(string_from_server == "0"):
  		textmsg("Gripper Cycle Number : ", "Number of cycles is unreachable.")
  	else:
  		textmsg("Gripper Cycle Number : ", string_from_server)
  	end
  end
  
  def rq_print_gripper_driver_state(gripper_socket="1"):
  	socket_send_string("GET DST",gripper_socket)
  	sync()
  	string_from_server = socket_read_string(gripper_socket)
  	sync()
  
  	if(string_from_server == "0"):
  		textmsg("Gripper Driver State : ", "RQ_STATE_INIT")
  	elif(string_from_server == "1"):
  		textmsg("Gripper Driver State : ", "RQ_STATE_LISTEN")
  	elif(string_from_server == "2"):
  		textmsg("Gripper Driver State : ", "RQ_STATE_READ_INFO")
  	elif(string_from_server == "3"):
  		textmsg("Gripper Driver State : ", "RQ_STATE_ACTIVATION")
  	else:
  		textmsg("Gripper Driver State : ", "RQ_STATE_RUN")
  	end
  end
  
  def rq_print_gripper_serial_number():
  	#socket_send_string("GET SNU",gripper_socket)
  	#sync()
  	#string_from_server = socket_read_string(gripper_socket)
  	#sync()
  	#textmsg("Gripper Serial Number : ", string_from_server)
  end
  
  def rq_print_gripper_firmware_version(gripper_socket="1"):
  	socket_send_string("GET FWV",gripper_socket)
  	sync()
  	string_from_server = socket_read_string(gripper_socket)
  	sync()
  	textmsg("Gripper Firmware Version : ", string_from_server)
  end
  
  def rq_print_gripper_driver_version(gripper_socket="1"):
  	socket_send_string("GET VER",gripper_socket)
  	sync()
  	string_from_server = socket_read_string(gripper_socket)
  	sync()
  	textmsg("Gripper Driver Version : ", string_from_server)
  end
  
  def rq_print_gripper_probleme_connection(gripper_socket="1"):
  	socket_send_string("GET PCO",gripper_socket)
  	sync()
  	string_from_server = socket_read_string(gripper_socket)
  	sync()
  	if (string_from_server == "0"):
  		textmsg("Gripper Connection State : ", "No connection problem detected")
  	else:
  		textmsg("Gripper Connection State : ", "Connection problem detected")
  	end
  end
  
  # Returns True if list_of_bytes is [3, 'a', 'c', 'k']
  def is_ack(list_of_bytes):
  
  	# list length is not 3
  	if (list_of_bytes[0] != 3):
  		return False
  	end
  
  	# first byte not is 'a'?
  	if (list_of_bytes[1] != 97):
  		return False
  	end
  
  	# first byte not is 'c'?
  	if (list_of_bytes[2] != 99):
  		return False
  	end
  
  	# first byte not is 'k'?
  	if (list_of_bytes[3] != 107):
  		return False
  	end
  
  	return True
  end
  
  # Returns True if list_of_bytes is not [3, 'a', 'c', 'k']
  def is_not_ack(list_of_bytes):
  	if (is_ack(list_of_bytes)):
  		return False
  	else:
  		return True
  	end
  end
  
  def is_STA_gripper_activated (list_of_bytes):
  
  	# list length is not 1
  	if (list_of_bytes[0] != 1):
  		return False
  	end
  
  	# byte is '3'?
  	if (list_of_bytes[1] == 51):
  		return True
  	end
  
  	return False
  end
  
  # Returns True if list_of_byte is [1, '1'] or [1, '2']
  # Used to test OBJ = 0x1 or OBJ = 0x2
  def is_OBJ_object_detected (list_of_bytes):
  
  	# list length is not 1
  	if (list_of_bytes[0] != 1):
  		return False
  	end
  
  	# byte is '2'?
  	if (list_of_bytes[1] == 50):
  		return True
  	end
  
  	# byte is '1'?
  	if (list_of_bytes[1]  == 49):
  		return True
  	end
  
  	return False
  
  end
  
  # Returns True if list_of_byte is [1, '3']
  # Used to test OBJ = 0x3
  def is_OBJ_gripper_at_position (list_of_bytes):
  
  	# list length is not 1
  	if (list_of_bytes[0] != 1):
  		return False
  	end
  
  	# byte is '3'?
  	if (list_of_bytes[1] == 51):
  		return True
  	end
  
  	return False
  end
  
  def is_not_OBJ_gripper_at_position (list_of_bytes):
  
  	if (is_OBJ_gripper_at_position(list_of_bytes)):
  		return False
  	else:
  		return True
  	end
  end
  
  def is_FLT_no_fault(list_of_bytes):
  
  	# list length is not 2
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  
  	# first byte is '0'?
  	if (list_of_bytes[1] != 48):
  		return False
  	end
  
  	# second byte is '0'?
  	if (list_of_bytes[2] != 48):
  		return False
  	end
  
  	return True
  
  end
  
  def is_FLT_action_delayed(list_of_bytes):
  
  	# list length is not 2
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  
  	# first byte is '0'?
  	if (list_of_bytes[1] != 48):
  		return False
  	end
  
  	# second byte is '5'?
  	if (list_of_bytes[2] != 53):
  		return False
  	end
  
  	return True
  end
  
  def is_FLT_not_activated(list_of_bytes):
  
  	# list length is not 2
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  
  	# first byte is '0'?
  	if (list_of_bytes[1] != 48):
  		return False
  	end
  
  	# second byte is '7'?
  	if (list_of_bytes[2] != 55):
  		return False
  	end
  
  	return True
  end
  
  def is_FLT_autorelease_in_progress(list_of_bytes):
  
  	# list length is not 2
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  
  	# first byte is '1'?
  	if (list_of_bytes[1] != 49):
  		return False
  	end
  
  	# second byte is '1'?
  	if (list_of_bytes[2] != 49):
  		return False
  	end
  
  	return True
  
  end
  
  def is_FLT_overcurrent(list_of_bytes):
  
  	# list length is not 2
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  
  	# first byte is '1'?
  	if (list_of_bytes[1] != 49):
  		return False
  	end
  
  	# second byte is '4'?
  	if (list_of_bytes[2] != 52):
  		return False
  	end
  
  	return True
  
  end
  
  def is_FLT_autorelease_completed(list_of_bytes):
  
  	# list length is not 2
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  
  	# first byte is '1'?
  	if (list_of_bytes[1] != 49):
  		return False
  	end
  
  	# second byte is '5'?
  	if (list_of_bytes[2] != 53):
  		return False
  	end
  
  	return True
  
  end
  
  def rq_set_var(var_name, var_value, gripper_socket="1"):
  
  	sync()
  	if (var_name == ACT):
  		socket_set_var("ACT", var_value, gripper_socket)
  	elif (var_name == GTO):
  		socket_set_var("GTO", var_value, gripper_socket)
  	elif (var_name == ATR):
  		socket_set_var("ATR", var_value, gripper_socket)
  	elif (var_name == ARD):
  		socket_set_var("ARD", var_value, gripper_socket)
  	elif (var_name == FOR):
  		socket_set_var("FOR", var_value, gripper_socket)
  	elif (var_name == SPE):
  		socket_set_var("SPE", var_value, gripper_socket)
  	elif (var_name == POS):
  		socket_set_var("POS", var_value, gripper_socket)
  	else:
  	end
  
  	sync()
  	ack = socket_read_byte_list(3, gripper_socket)
  	sync()
  
  	while(is_not_ack(ack)):
  
  		textmsg("rq_set_var : retry", " ...")
  		textmsg("rq_set_var : var_name = ", var_name)
  		textmsg("rq_set_var : var_value = ", var_value)
  
  		if (ack[0] != 0):
  			textmsg("rq_set_var : invalid ack value = ", ack)
  		end
  
  		socket_set_var(var_name , var_value,gripper_socket)
  		sync()
  		ack = socket_read_byte_list(3, gripper_socket)
  		sync()
  	end
  end
  
  
  def rq_get_var(var_name, nbr_bytes, gripper_socket="1"):
  
  	if (var_name == FLT):
  		socket_send_string("GET FLT",gripper_socket)
  		sync()
  	elif (var_name == OBJ):
  		socket_send_string("GET OBJ",gripper_socket)
  		sync()
  	elif (var_name == STA):
  		socket_send_string("GET STA",gripper_socket)
  		sync()
  	elif (var_name == PRE):
  		socket_send_string("GET PRE",gripper_socket)
  		sync()
  	else:
  	end
  
  	var_value = socket_read_byte_list(nbr_bytes, gripper_socket)
  	sync()
  
  	return var_value
  end
  
  ############################################
  # normalized functions (maps 0-100 to 0-255)
  ############################################
  def rq_set_force_norm(force_norm, gripper_socket="1"):
      force_gripper = norm_to_gripper(force_norm)
      rq_set_force(force_gripper, gripper_socket)
  end
  
  def rq_set_speed_norm(speed_norm, gripper_socket="1"):
      speed_gripper = norm_to_gripper(speed_norm)
      rq_set_speed(speed_gripper, gripper_socket)
  end
  
  def rq_move_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_move(pos_gripper, gripper_socket)
  end
  
  def rq_move_and_wait_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_move_and_wait(pos_gripper, gripper_socket)
  end
  
  def rq_set_pos_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_set_pos(pos_gripper, gripper_socket)
  end
  
  
  def rq_current_pos_norm(gripper_socket="1"):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_norm = gripper_to_norm(pos_gripper)
      return pos_norm
  end
  
  def gripper_to_norm(value_gripper):
      value_norm = (value_gripper / 255) * 100
      return floor(value_norm)
  end
  
  def norm_to_gripper(value_norm):
      value_gripper = (value_norm / 100) * 255
      return ceil(value_gripper)
  end
  
  def rq_get_position():
      return rq_current_pos_norm()
  end
  #########################################
  rq_obj_detect = 0
  rq_init_connection(9, "1")
  connectivity_checked = [-1,-1,-1,-1]
  status_checked = [-1,-1,-1,-1]
  current_speed = [-1,-1,-1,-1]
  current_force = [-1,-1,-1,-1]
  
  #######Gripper URCap preamble end##########
  ###########################################
  
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: Robotiq_Wrist_Camera, 1.2.1.R01, Robotiq Inc.
  #   Type: Camera
  
  ###########################################
  #######Vision urcap preamble start########
  
  logging_service = rpc_factory("xmlrpc","http://127.0.0.1:4747")
  # Converts a pose relative to the flange in the base frame.
  def get_T_in_base_from_flange(T_x_in_flange):
  
    T_flange_in_base = get_actual_tool_flange_pose()
  
    T_x_in_base = pose_trans(T_flange_in_base, T_x_in_flange)
  
    return T_x_in_base
  end
  
  # Search pose cartesian (camera pose)
  Point_3 = p[0.337876, -0.0755721, 0.592713, -1.63347, 1.80899, -0.657436]
  robopoint = p[0.318494, -0.105544, 0.853649, -1.74488, 1.71299, -0.679634]
  T_camera_in_flange = p[0.0, 0.05, 0.05, -0.5, 0.0, 0.0]
  snapshot_position_offset = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  ignore_snapshot_position = False
  
  # Open connection with vision service
  xmlrpc_server=rpc_factory("xmlrpc","http://127.0.0.1:4242")
  
  #######Vision urcap preamble end##########
  ###########################################
  
  # end: URCap Installation Node
  $ 1 "Robot Program"
#  $ 2 "Popup"
#  popup("Don't modify this program. It will be erased at next boot.", "Warning", True, False, blocking=True)
  $ 3 "'Activate the gripper before controling it'"
  # 'Activate the gripper before controling it'
#  $ 4 "Popup"
#  popup("Activate the gripper before controling it", "Message", False, False, blocking=True)
  $ 5 "rq_activate_and_wait()"
  rq_activate_and_wait()
  $ 6 "'Fully close the gripper and wait for completion'"
  # 'Fully close the gripper and wait for completion'
#  $ 7 "Popup"
#  popup("Fully close the gripper and wait for completion", "Message", False, False, blocking=True)
  # begin: URCap Program Node
  #   Source: Robotiq_2-Finger_Adaptive_Gripper, 1.1.2, Robotiq Inc.
  #   Type: Gripper
  $ 8 "Gripper Close (1)"
  if (connectivity_checked[0] != 1):
    if not(rq_set_sid(9, "1")):
#      popup("Gripper 1 must be connected to run this program.", False, False, True)
    end
    connectivity_checked[0] = 1
  end
  if (status_checked[0] != 1):
    if not(rq_is_gripper_activated("1")):
#      popup("Gripper 1 is not activated. Go to Installaton tab > Gripper to activate it and run the program again.", False, False, True)
    end
    status_checked[0] = 1
  end
  if (current_speed[0] != 79):
    rq_set_speed_norm(79, "1")
    current_speed[0] = 79
  end
  if (current_force[0] != 100):
    rq_set_force_norm(100, "1")
    current_force[0] = 100
  end
  rq_set_pos_norm(100, "1")
  rq_go_to("1")
  rq_wait("1")
  # end: URCap Program Node
  $ 9 "'Fully open the gripper and wait for completion'"
  # 'Fully open the gripper and wait for completion'
#  $ 10 "Popup"
#  popup("Fully open the gripper and wait for completion", "Message", False, False, blocking=True)
  # begin: URCap Program Node
  #   Source: Robotiq_2-Finger_Adaptive_Gripper, 1.1.2, Robotiq Inc.
  #   Type: Gripper
  $ 11 "Gripper Open (1)"
  if (connectivity_checked[0] != 1):
    if not(rq_set_sid(9, "1")):
#      popup("Gripper 1 must be connected to run this program.", False, False, True)
    end
    connectivity_checked[0] = 1
  end
  if (status_checked[0] != 1):
    if not(rq_is_gripper_activated("1")):
#      popup("Gripper 1 is not activated. Go to Installaton tab > Gripper to activate it and run the program again.", False, False, True)
    end
    status_checked[0] = 1
  end
  if (current_speed[0] != 79):
    rq_set_speed_norm(79, "1")
    current_speed[0] = 79
  end
  if (current_force[0] != 100):
    rq_set_force_norm(100, "1")
    current_force[0] = 100
  end
  rq_set_pos_norm(0, "1")
  rq_go_to("1")
  rq_wait("1")
  # end: URCap Program Node
  $ 12 "'Partially close the gripper and wait for completion'"
  # 'Partially close the gripper and wait for completion'
#  $ 13 "Popup"
#  popup("Partially close the gripper and wait for completion", "Message", False, False, blocking=True)
  # begin: URCap Program Node
  #   Source: Robotiq_2-Finger_Adaptive_Gripper, 1.1.2, Robotiq Inc.
  #   Type: Gripper
  $ 14 "Gripper Move31% (1)"
  if (connectivity_checked[0] != 1):
    if not(rq_set_sid(9, "1")):
#      popup("Gripper 1 must be connected to run this program.", False, False, True)
    end
    connectivity_checked[0] = 1
  end
  if (status_checked[0] != 1):
    if not(rq_is_gripper_activated("1")):
#      popup("Gripper 1 is not activated. Go to Installaton tab > Gripper to activate it and run the program again.", False, False, True)
    end
    status_checked[0] = 1
  end
  if (current_speed[0] != 79):
    rq_set_speed_norm(79, "1")
    current_speed[0] = 79
  end
  if (current_force[0] != 100):
    rq_set_force_norm(100, "1")
    current_force[0] = 100
  end
  rq_set_pos_norm(31, "1")
  rq_go_to("1")
  rq_wait("1")
  # end: URCap Program Node
  $ 15 "'Close the gripper and test the object detection'"
  # 'Close the gripper and test the object detection'
#  $ 16 "Popup"
#  popup("Close the gripper and test the object detection", "Message", False, False, blocking=True)
  # begin: URCap Program Node
  #   Source: Robotiq_2-Finger_Adaptive_Gripper, 1.1.2, Robotiq Inc.
  #   Type: Gripper
  $ 17 "Gripper Close (1)"
  if (connectivity_checked[0] != 1):
    if not(rq_set_sid(9, "1")):
#      popup("Gripper 1 must be connected to run this program.", False, False, True)
    end
    connectivity_checked[0] = 1
  end
  if (status_checked[0] != 1):
    if not(rq_is_gripper_activated("1")):
#      popup("Gripper 1 is not activated. Go to Installaton tab > Gripper to activate it and run the program again.", False, False, True)
    end
    status_checked[0] = 1
  end
  if (current_speed[0] != 79):
    rq_set_speed_norm(79, "1")
    current_speed[0] = 79
  end
  if (current_force[0] != 100):
    rq_set_force_norm(100, "1")
    current_force[0] = 100
  end
  rq_set_pos_norm(100, "1")
  rq_go_to("1")
  rq_wait("1")
  # end: URCap Program Node
  $ 18 "If rq_is_object_detected()"
  if (rq_is_object_detected()):
    $ 19 "'An object has been detected'"
    # 'An object has been detected'
#    $ 20 "Popup"
#    popup("An object has been detected", "Message", False, False, blocking=True)
  else:
    $ 21 "Else"
    $ 22 "'No object detected'"
    # 'No object detected'
#    $ 23 "Popup"
#    popup("No object detected", "Message", False, False, blocking=True)
  end
  $ 24 "'Get the gripper current position in %. 100% is reached when the grippers is in encompassing mode.'"
  # 'Get the gripper current position in %. 100% is reached when the grippers is in encompassing mode.'
#  $ 25 "popup(rq_get_position(), 'Gripper position (%)', blocking=True)"
#  popup(rq_get_position(), "Gripper position (%)", blocking=True)
  $ 26 "'Command the gripper to open and continue the program execution.'"
  # 'Command the gripper to open and continue the program execution.'
#  $ 27 "Popup"
#  popup("Command the gripper to open and continue the program execution.", "Message", False, False, blocking=True)
  # begin: URCap Program Node
  #   Source: Robotiq_2-Finger_Adaptive_Gripper, 1.1.2, Robotiq Inc.
  #   Type: Gripper
  $ 28 "Gripper Open (1)"
  if (connectivity_checked[0] != 1):
    if not(rq_set_sid(9, "1")):
#      popup("Gripper 1 must be connected to run this program.", False, False, True)
    end
    connectivity_checked[0] = 1
  end
  if (status_checked[0] != 1):
    if not(rq_is_gripper_activated("1")):
#      popup("Gripper 1 is not activated. Go to Installaton tab > Gripper to activate it and run the program again.", False, False, True)
    end
    status_checked[0] = 1
  end
  if (current_speed[0] != 0):
    rq_set_speed_norm(0, "1")
    current_speed[0] = 0
  end
  if (current_force[0] != 0):
    rq_set_force_norm(0, "1")
    current_force[0] = 0
  end
  rq_set_pos_norm(0, "1")
  rq_go_to("1")
  # end: URCap Program Node
  $ 29 "'You can insert robot movement instructions while the gripper is moving'"
  # 'You can insert robot movement instructions while the gripper is moving'
  $ 30 "Wait rq_is_motion_complete()"
  while (not(rq_is_motion_complete())):
    sync()
  end
  $ 31 "'Gripper motion completed'"
  # 'Gripper motion completed'
#  $ 32 "Popup"
#  popup("Gripper motion completed", "Message", False, False, blocking=True)
  $ 33 "Script Funtions"
  $ 34 "Halt"
  halt
  $ 35 "Functions operating on a 0-100 span"
  $ 36 "'Sets the gripper force [0-100]'"
  # 'Sets the gripper force [0-100]'
  $ 37 "rq_set_force_norm(50)"
  rq_set_force_norm(50)
  $ 38 "'Sets the gripper speed [0-100]'"
  # 'Sets the gripper speed [0-100]'
  $ 39 "rq_set_speed_norm(75)"
  rq_set_speed_norm(75)
  $ 40 "'Sends the partial move command and continue [0-100]'"
  # 'Sends the partial move command and continue [0-100]'
  $ 41 "rq_move_norm(75)"
  rq_move_norm(75)
  $ 42 "'Sends the partial move command and wait until completion. [0-100]'"
  # 'Sends the partial move command and wait until completion. [0-100]'
  $ 43 "rq_move_and_wait_norm(30)"
  rq_move_and_wait_norm(30)
  $ 44 "'Sets the target position [0-100]'"
  # 'Sets the target position [0-100]'
  $ 45 "rq_set_pos_norm(45)"
  rq_set_pos_norm(45)
  $ 46 "'Returns the gripper current position [0-100]'"
  # 'Returns the gripper current position [0-100]'
  $ 47 "position≔rq_current_pos_norm()"
  global position=rq_current_pos_norm()
  $ 48 "Functions operating on a 0-255 span"
  $ 49 "'Sends the partial move command and wait until completion. [0-255]'"
  # 'Sends the partial move command and wait until completion. [0-255]'
  $ 50 "rq_move_and_wait(150)"
  rq_move_and_wait(150)
  $ 51 "'Sets the target position'"
  # 'Sets the target position'
  $ 52 "rq_set_pos(150)"
  rq_set_pos(150)
  $ 53 "'Returns the gripper current position [0-255]'"
  # 'Returns the gripper current position [0-255]'
  $ 54 "position≔rq_current_pos()"
  global position=rq_current_pos()
  $ 55 "'Sends the partial move command and continue'"
  # 'Sends the partial move command and continue'
  $ 56 "rq_move(150)"
  rq_move(150)
  $ 57 "'Sets the gripper speed [0-255]'"
  # 'Sets the gripper speed [0-255]'
  $ 58 "rq_set_speed(255)"
  rq_set_speed(255)
  $ 59 "'Sets the gripper force [0-255]'"
  # 'Sets the gripper force [0-255]'
  $ 60 "rq_set_force(255)"
  rq_set_force(255)
  $ 61 "Functions independant of the span"
  $ 62 "'Activate the gripper if needed and wait for completion'"
  # 'Activate the gripper if needed and wait for completion'
  $ 63 "rq_activate_and_wait()"
  rq_activate_and_wait()
  $ 64 "'Activate the gripper and continue execution'"
  # 'Activate the gripper and continue execution'
  $ 65 "rq_activate()"
  rq_activate()
  $ 66 "'Wait the end of activation'"
  # 'Wait the end of activation'
  $ 67 "Wait rq_is_gripper_activated()"
  while (not(rq_is_gripper_activated())):
    sync()
  end
  $ 68 "'Sends the open command and continue'"
  # 'Sends the open command and continue'
  $ 69 "rq_open()"
  rq_open()
  $ 70 "'Send the close command and continue'"
  # 'Send the close command and continue'
  $ 71 "rq_close()"
  rq_close()
  $ 72 "'Returns True if the motion is completed.'"
  # 'Returns True if the motion is completed.'
  $ 73 "motion_complete≔rq_is_motion_complete()"
  global motion_complete=rq_is_motion_complete()
  $ 74 "'Returns True if an object has been detected.'"
  # 'Returns True if an object has been detected.'
  $ 75 "object_detected≔rq_is_object_detected()"
  global object_detected=rq_is_object_detected()
  $ 76 "'Sends the open command and wait until completion'"
  # 'Sends the open command and wait until completion'
  $ 77 "rq_open_and_wait()"
  rq_open_and_wait()
  $ 78 "'Sends the close command and wait until completion'"
  # 'Sends the close command and wait until completion'
  $ 79 "rq_close_and_wait()"
  rq_close_and_wait()
  $ 80 "'Sets the goto bit to 1. Refer to user manual.'"
  # 'Sets the goto bit to 1. Refer to user manual.'
  $ 81 "rq_go_to()"
  rq_go_to()
  $ 82 "'Stops motion. The goto bit is cleared.'"
  # 'Stops motion. The goto bit is cleared.'
  $ 83 "rq_stop()"
  rq_stop()
  $ 84 "'Sends the closing autorelease instruction and wait until completion'"
  # 'Sends the closing autorelease instruction and wait until completion'
  $ 85 "rq_auto_release_close_and_wait()"
  rq_auto_release_close_and_wait()
  $ 86 "'Sends the opening autorelease instruction and wait until completion'"
  # 'Sends the opening autorelease instruction and wait until completion'
  $ 87 "rq_auto_release_open_and_wait()"
  rq_auto_release_open_and_wait()
  $ 88 "'Resets the activation status of the gripper. Use after an autorelease before activating the gripper.'"
  # 'Resets the activation status of the gripper. Use after an autorelease before activating the gripper.'
  $ 89 "rq_reset()"
  rq_reset()
end
